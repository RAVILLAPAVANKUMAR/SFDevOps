# This is a basic workflow to help you get started with Actions

name: Deploy to Salesforce Pipeline

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to undo commit'
        required: true
        default: 'develop'
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  pmd-run:
        runs-on: ubuntu-latest
        steps:
        # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2

            # Install PMD
            - name: 'Install PMD'
              run: |
                  PMD_VERSION=`cat pmd/pmd-version.txt`
                  wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F$PMD_VERSION/pmd-bin-$PMD_VERSION.zip
                  unzip pmd-bin-$PMD_VERSION.zip -d ~
                  mv ~/pmd-bin-$PMD_VERSION ~/pmd
                  ~/pmd/bin/run.sh pmd --version
            # Run PMD scan
            - name: 'Run PMD scan'
              run: ~/pmd/bin/run.sh pmd -d force-app -R pmd/ruleset.xml -f text
  scratch-org-test:
        needs: pmd-run
        runs-on: ubuntu-latest        
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2
              
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version
                  
            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
              shell: bash
              run: |
                  echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt
                  secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
                  if [ $secretFileSize == 1 ]; then
                      echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
                      exit 1;
                  fi
                  
          # Authenticate dev hub
            - name: 'Authenticate Dev Hub'
              run: sfdx auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -a devhub -d

            # Create scratch org
            - name: 'Create scratch org'
              run: sfdx force:org:create -f config/project-scratch-def.json -a scratch-org -s -d 1
              continue-on-error: true #To be removed (Governer limits hit)

            # Deploy source to scratch org
            - name: 'Push source to scratch org'
              run: sfdx force:source:push
              continue-on-error: true #To be removed (Governer limits hit)

              
          #  # Run Apex tests in scratch org
          #   - name: 'Run Apex tests'
          #     run: sfdx force:apex:test:run -c -r human -d ./tests/apex -w 20
          
          #   # Save Code Coverage for Next Job
          #   - name: "Make Report Available"
          #     uses: actions/upload-artifact@v2
          #     with:
          #       name: apex-code-coverage
          #       path: tests/apex/test-result-codecoverage.json
              
            # Housekeeping
            - name: 'Delete scratch org'
              if: always()
              run: sfdx force:org:delete -p -u scratch-org
              continue-on-error: true #To be removed (Governer limits hit)

  # This workflow contains a single job called "build"
  build:
    needs: scratch-org-test
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Setup Node
    - name: Setup Node
      uses: actions/setup-node@v1
      with:
          node-version: '14.x'
    # Install SFDX CLI --old run -- npm install sfdx-cli --global
    - name: Install SFDX CLI
      run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          ~/sfdx/bin/sfdx version

    # Authorize SF Org
    - name: Authorize SF Org
      env:
        CLIENT_ID: ${{ secrets.SALESFORCEPRODCLIENTID }}
        USERNAME: ${{ secrets.SALESFORCEPRODUSERNAME }}
        INSTANCE_URL: ${{ secrets.SALESFORCEPRODINSTANCEURL }}
      run: sfdx force:auth:jwt:grant --clientid $CLIENT_ID --jwtkeyfile ./buildfiles/server.key --username $USERNAME --instanceurl $INSTANCE_URL -a prod

     # Run Apex tests in developer org
    - name: 'Run Apex tests'
      run: sfdx force:apex:test:run -u ${{ secrets.SALESFORCEPRODUSERNAME }} -c -r json -d ./tests/apex -w 20 
      continue-on-error: true
  
    # Save Code Coverage for Next Job
    - name: "Make Report Available"
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: apex-code-coverage
        path: tests/apex/test-result-codecoverage.json

    # Convert to Deploy Source
    - name: Convert to Deploy Source
      run: sfdx force:source:convert -r ./force-app -d ./toDeploy
    
    # Run Validation of Deploy Source
    - name: Run Validation on Deploy Source
      run: sfdx force:mdapi:deploy -l RunLocalTests -c -d ./toDeploy -u prod -w 10
    
    # Deploy
    - name : Deploy to SF Org
      run: sfdx force:mdapi:deploy -l RunLocalTests -d ./toDeploy -u prod -w 10

  Undo:
    needs: build
    if: needs.build.result != 'success'
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout
        uses: actions/checkout@v2
        with:
           ref: ${{ github.event.inputs.branch }}
           fetch-depth: 0 
      - name: Undo Push
        uses: exions/undo-push@v1
        with:
          branch: ${{ github.event.inputs.branch }}
  
  feature-merge-main:
        needs: build
        if: needs.build.result == 'success'
        runs-on: ubuntu-latest 
        steps:
        - name: Merge develop to master
          uses: devmasx/merge-branch@master
          with:
            type: now
            from_branch: develop
            target_branch: master
            github_token: ${{ secrets.GITHUBTOKEN }}
